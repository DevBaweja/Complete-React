Don't touch DOM
Lego Block( Resuable-Components )

### UI Components

Material UI React
Semantic UI React
Bootstrap React
Blueprint

### Unidirectional Data Flow

State & Component
function React(state, component){

}

It creates Virtual DOM (React Developer Tool)

React react to state change

### Just UI library
React is UI library and not framework like Angular

Learn once and write anywhere
It don't assume tech you are using like Angular

React Native - ios,android
React 360 - VR 
Electron & React Desktop - Desktop App (win,linux,mac)
React Blessed - Terminal

ie reason react and react-dom are two libraries

Keywords
    Declarative
    Components
    State
    Props
    JSX
    VirtualDOM

### To decide

Components
States and where it live
changes in state changes


### Create React App
start - Start dev server, webpack, babel
build - Build into public folder with older config js
test - for testing application
eject - Remove all config files of webpack and babel

### List

render() {
    return (
            <div className="App">
                {this.state.monsters.map(monster => (
                    <h1>{monster.name}</h1>
                )).join('')}
            </div>
        );
}
    
As we know array are renders as whole string with implicit join('')
We can also add explicit join('')

renderList = () => {
    return this.state.monsters.map(monster => <h1>{monster.name}</h1>);
};

This h1 is jsx element

Also in react  while loop it is used to have unique key to each of element
renderList = () => {
    return this.state.monsters.map(monster => <h1 key={monster.id}>{monster.name}</h1>);
};

It need these so that when state changes it know exactly what to change in VirtualDOM

### Arch

src
    components
        card
            card.component.jsx
            card.styles.css
        card-list

This is way better thern ClassList as folder and class names

const cardList = () => {
    return <div class="card-list"></div>
}
Use className="card-list"


### Wrapping and Nesting

Wrapping div
<CardList>{this.renderList()}</CardList>

const CardList = props => {
    return <div className="card-list">{props.children}</div>;
};

However we want CardList to deal with Card ie Nesting

<CardList monsters={this.state.monsters} />

const CardList = props => {
    const renderList = () => {
        return props.monsters.map(monster => <p key={monster.id}>{monster.name}</p>);
    };
    return <div className="card-list">{renderList()}</div>
}
renderList method actual place is in CardList component

Now we want Card component to responsible for displaying card
In renderList method we will use Card component and pass simple monster into it
const renderList = () => {
    return props.monsters.map(monster => <Card monster={monster} key={monster.id}/>);
};
const Card = props => {
    return (
        <div className="card">
            <p>{props.monster.name}</p>
        </div>
    );
};

### Configuring as much as possible
robohash to get images
const renderList = () => {
    return props.monsters.map((monster, index) => <Card monster={monster} key={monster.id} set={`set${index}`} />);
};


const CardList = props => {
    const renderList = () => {
        return props.monsters.map((monster, index) => <Card key={monster.id} monster={monster} set="set5" />);
    };
    return <div className="card-list">{renderList()}</div>;
};

Card.defaultProps = {
    set: 'set5'
}

### Search Functionality

There is type search
<input type="search" />

<input type="search" placeholder="Search Monsters" onChange={this.filterHandler} />

filterHandler = event => {
    this.setState({
        search: event.target.value,
    });
    console.log(this.state);
};

We will see that search field is one step back in console.log
Here key is that this.setState is asynchronous function
and it receive callback

filterHandler = event => {
    this.setState({
        search: event.target.value,
    },() => {
    console.log(this.state);
    });
};

filterHandler = async event => {
    await this.setState({
        search: event.target.value,
    });
    console.log(this.state);
};

### Synthetic Event

Event receive in HTML are Event while in JSX it is SyntheticEvent
onevent in HTML and it emit Event 
onEvent in JSX and it emit SyntheticEvent

setState cann't be called in render
In that case every time render is called it will set state
As every time state is changes render function is called
It will create loop of virtualDOM re-rendering

### Methods Passing

Methods remain in stateful component where it can manipulate state
Methods can be passed from stateful component to stateless component
so that stateless component can have access to state indirectly

<SearchBox change={this.filterHandler} placeholder="Search Monsters" />

export const SearchBox = ({placeholder, change}) => (
    <div className="search-box">    
            <input type="search" className="search" placeholder={placeholder} onChange={change} />
    </div>
)

import {SearchBox} from './components/search-box/search-box.component.jsx'

As it not default export

### Uplifting State Up

Here also we will not put state = {search : ''} on SearchBox as another component at upper level might need it
So we put it in way it is accessed by every component

Also need to keep filterHandler on App and not on SearchBox
as it need to change state

Accessing state can be done by props but in case of modification of state we need state itself

### This Keyword

In class when we use method
method(){

}
this belong to class
Only in class as otherwise it will point to window

However in event handlers this will change it to window
So for event we use Arrow function


class App extends Component{
    method(){
        console.log(this);
    }

    render(){
        return (
        <div className="App">
            <input type="text" onChange={this.method} />
            <div>{this.method()}</div>
        </div>
        );
    }
}

In simple calling this.method() will belong to App
as method() is an method and not function
(Just synthetic sugar, actually it will set this automatically as it is class)

In event handlers this will be undefined as it is method and not function(no window)
As class method this will not belong to window so we lost this

In this case we use bind or arrow function to get this keyword from class

## Using bind

class App extends Component{
    method() {
        console.log(this);
    }

    render(){
        return (
        <div className="App">
            <input type="text" onChange={this.method.bind(this)} />
            <div>{this.method()}</div>
        </div>
        );
    }
}

## Using Arrow function

class App extends Component{
    method = () => {
        console.log(this);
    }

    render(){
        return (
        <div className="App">
            <input type="text" onChange={this.method} />
            <div>{this.method()}</div>
        </div>
        );
    }
}


### Deploy to github pages

npm i gh-pages

package.json
    "homepage" : "https://devbaweja.github.io/<Repo>"
Add Script
    "predeploy" : "npm run build",
    "deploy" : "gh-pages -d build"

npm run deploy
npm knows to run pre script then actual script


git remote add origin <SSH>
git add -A
git commit -m "Message"
git push origin master