### React Saga
Middleware
Side effects (backend,api,impure)

Impure is anything that may render different output given same inputs
ie maybe it dependent upon outer scope or some api calls

const add = (a, b) => a + b;
With same inputs, outputs are restricted

const x = value;
const add = (a, b) => x + a + b;
With same inputs of a and b it dependent upon x
Impure Function

Api request or Impure function

### Generator Function
Similar to async await

function* gen(){
    
}

function* gen(){
    yeild value;
}

const data = gen()
Although we are invoking it will not execute directly
next() to execute upto next yield

data.next()

Async Await are build on top of generator functions

Calling a generator function does not execute its body immediately. an iterator object for the function is returned instead. When the iterator's next() method is called, the generator function's body is executed until the first yield expression, which specifies the value to be returned from the iterator or, with yield*, delegates to another generator function. The next() method returns an object with a value property containing the yielded value and a done property which indicates whether the generator has yielded its last value, as a boolean. Calling the next() method with an argument will resume the generator function execution, replacing the yield expression where an execution was paused with the argument from next().

A return statement in a generator, when executed, will make the generator finish (i.e. the done property of the object returned by it will be set to true). If a value is returned, it will be set as the value property of the object returned by the generator.
Much like a return statement, an error is thrown inside the generator will make the generator finished -- unless caught within the generator's body.
When a generator is finished, subsequent next() calls will not execute any of that generator's code, they will just return an object of this form: {value: undefined, done: true}.

### Redux Saga

npm i redux-saga

# In store
import createSagaMiddleware from 'redux-saga';

const sagaMiddleware = createSagaMiddleware();

const middleware = [sagaMiddleware];

After applyMiddleware

sagaMiddleware.run()
We will pass individual saga

import { takeEvery, call, put } from 'redux-saga/effects';
import ShopActionTypes from './shop.types';
import { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';
import { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';

export function* fetchCollections() {
    const collectionRef = firestore.collection('collection');

    try {
        const snapshot = yield collectionRef.get();
        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);

        yield put(fetchCollectionsSuccess(collectionsMap));
    } catch (err) {
        yield put(fetchCollectionsFailure(err));
    }
}

export function* fetchCollectionsStart() {
    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollections);
}

take,takeEvery,takeLatest

### takeEvery, call, put, delay

Root Saga
import { all, call } from 'redux-saga/effects';
import { fetchCollectionsStart } from './shop/shop.sagas';

export default function* rootSaga() {
    yield all([call(fetchCollectionsStart)]);
}