### Css in Js

# import './component.scss'
Problem with  import css is that it will add all into one file
And managing class will become difficult

# Or we can create styles object in js and put styles in JSX
Benefit is that it will not leak styles

selector {
    background-color: red;
    font-size: 18px
}

const styles ={
    backgroundColor: 'red',
    fontSize: '18px',
}
<Component styles={styles} />

Problem is that we cann't really use more advanced CSS and also inline styles will be applied

# Styled Components

npm i styled-components

import styled from 'styled-components'

const Text = styled.div`
    background-color: red;
    font-size: 18px;
`

It is now component <Text />

It will generate unique class name for each of styled-components
so css never leak

We can now share this component anywhere so it is also reusable

We are now able to leverage props in styled-components to render css rule

const Text = styled.div`
    background-color: red;
    font-size: 18px;
    border:${({isActive}) => isActive ? '2px solid green' : '1px solid black'}
`

<Text isActive/>

### HomePage

import styled from 'styled-components';

export const HomeContainer = styled.div`
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px 80px;
`;

import { HomeContainer } from './home.styles.jsx'
 <HomeContainer>
    <Directory />
</HomeContainer>

Now we can pass attr to style component
It also remove need for class name

### Header

import styled from 'styled-components';
import { Link } from 'react-router-dom';

export const HeaderContainer = styled.div`
    padding: 0px 60px;
    height: 70px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    margin-bottom: 25px;
`;

export const OptionContainer = styled.div`
    width: 50%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: flex-end;
`;

export const LogoContainer = styled(Link)`
    height: 100%;
    width: 70px;
    padding: 25px;
`;

import {HeaderContainer,OptionContainer,LogoContainer} from './header.styles'

<HeaderContainer>
    <LogoContainer to="/">
        <Logo className="logo"></Logo>
    </LogoContainer>
    <OptionContainer>
        <Link to="/shop" className="option">
            Shop
        </Link>
        <Link to="/contact" className="option">
            Contact
        </Link>
        {renderUser()}
        <CartIcon />
    </OptionContainer>
    {!hidden ? <CartDropdown /> : null}
</HeaderContainer>

When we need custom component

const CustomStyledComponent = styled(Component)`
`

### css in styled

import styled,{ css } from 'styled-components'

const OptionContainerStyles = css`
    padding: 10px 15px;
    cursor: pointer;
`

export const OptionLink = styled(Link)`
    ${OptionContainerStyles}
`;

export const OptionDiv = styled.div`
    ${OptionContainerStyles}
`;

If styling is same and only element id different then
we can use 'as' attr on styled component  

<OptionDiv as={Link} >

</OptionDiv>

<OptionLink as="div" >

</OptionLink>

And we no longer need { css } from 'styled-components'
And create OptionContainerStyles using this css block

`${getButtonStyles}`
will function automatically with argument passed to that component